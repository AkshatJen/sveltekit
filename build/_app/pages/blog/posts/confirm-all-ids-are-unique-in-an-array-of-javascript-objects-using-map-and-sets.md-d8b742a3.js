import{S as e,i as t,s as a,e as r,t as o,k as n,j as s,c as i,a as c,g as h,d as l,n as u,m as f,b as d,f as m,F as p,o as g,x as y,u as w,v as $,G as v}from"../../../chunks/vendor-d39b8e67.js";/* empty css                                                             */import{C as E}from"../../../chunks/Code-89bf94b1.js";function b(e){let t,a="const items = [\n  { \n    name: 'The first object', \n    id: 1 \n  }, {\n    name: 'Another object',\n    id: 42\n  }, {\n    name: 'Here is a third object',\n    id: 100\n  }, {\n    name: 'Oops! This one is a duplicate',\n    id: 42\n  },\n  // ...etc.\n]";return{c(){t=o(a)},l(e){t=h(e,a)},m(e,a){m(e,t,a)},p:v,d(e){e&&l(t)}}}function k(e){let t,a="const IDs = new Set(items.map(item => item.id))";return{c(){t=o(a)},l(e){t=h(e,a)},m(e,a){m(e,t,a)},p:v,d(e){e&&l(t)}}}function D(e){let t,a="IDs.length === items.length\n// Always returns false ðŸ¤”";return{c(){t=o(a)},l(e){t=h(e,a)},m(e,a){m(e,t,a)},p:v,d(e){e&&l(t)}}}function I(e){let t,a="[...IDs].length === items.length\n// Now it works!\n// true if all IDs were unique, false if not";return{c(){t=o(a)},l(e){t=h(e,a)},m(e,a){m(e,t,a)},p:v,d(e){e&&l(t)}}}function j(e){let t,a="// Another way to do the same thing:\nArray.from(IDs).length === items.length";return{c(){t=o(a)},l(e){t=h(e,a)},m(e,a){m(e,t,a)},p:v,d(e){e&&l(t)}}}function x(e){let t,a="// Reusable function to check uniqueness of keys in an array of objects \nconst isEverythingUnique = (arr, key) => {   \n    const uniques = new Set(arr.map(item => item[key]);   \n    return [...uniques].length === arr.length; \n}";return{c(){t=o(a)},l(e){t=h(e,a)},m(e,a){m(e,t,a)},p:v,d(e){e&&l(t)}}}function O(e){let t,a="// Reusable function to show the duplicate keys in an array of objects\nconst getDuplicates = (arr, key) => {\n  const keys = arr.map(item => item[key]);\n  return keys.filter(key => keys.indexOf(key) !== keys.lastIndexOf(key)) \n}";return{c(){t=o(a)},l(e){t=h(e,a)},m(e,a){m(e,t,a)},p:v,d(e){e&&l(t)}}}function T(e){let t,a="getDuplicates(items, 'id')\n \n// [42, 42]";return{c(){t=o(a)},l(e){t=h(e,a)},m(e,a){m(e,t,a)},p:v,d(e){e&&l(t)}}}function S(e){let t,a,v,S,q,C,P,H,A,M,N,R,G,J,W,U,L,F,Q,X,_,z,B,K,V,Y,Z,ee,te,ae,re,oe,ne,se,ie,ce,he,le,ue,fe,de,me,pe,ge,ye,we,$e,ve,Ee,be,ke,De,Ie,je,xe,Oe,Te,Se,qe,Ce,Pe,He,Ae,Me,Ne,Re,Ge,Je,We,Ue,Le,Fe,Qe,Xe,_e,ze,Be,Ke,Ve,Ye,Ze,et,tt,at,rt,ot,nt,st,it,ct,ht,lt,ut,ft,dt,mt,pt,gt,yt,wt,$t,vt,Et,bt,kt,Dt,It,jt,xt,Ot,Tt,St,qt,Ct,Pt,Ht,At,Mt,Nt,Rt,Gt,Jt,Wt,Ut,Lt,Ft,Qt,Xt,_t,zt,Bt,Kt,Vt,Yt,Zt,ea,ta,aa,ra,oa,na,sa,ia,ca,ha,la,ua,fa,da,ma,pa,ga,ya,wa,$a,va,Ea,ba,ka,Da,Ia,ja,xa,Oa,Ta,Sa,qa,Ca,Pa,Ha,Aa,Ma,Na,Ra,Ga,Ja,Wa,Ua,La,Fa,Qa,Xa,_a,za,Ba,Ka,Va,Ya,Za,er;return G=new E({props:{lang:"javascript",$$slots:{default:[b]},$$scope:{ctx:e}}}),Be=new E({props:{lang:"javascript",$$slots:{default:[k]},$$scope:{ctx:e}}}),wt=new E({props:{lang:"javascript",$$slots:{default:[D]},$$scope:{ctx:e}}}),Kt=new E({props:{lang:"javascript",$$slots:{default:[I]},$$scope:{ctx:e}}}),ta=new E({props:{lang:"javascript",$$slots:{default:[j]},$$scope:{ctx:e}}}),ha=new E({props:{lang:"javascript",$$slots:{default:[x]},$$scope:{ctx:e}}}),Ra=new E({props:{lang:"javascript",$$slots:{default:[O]},$$scope:{ctx:e}}}),Xa=new E({props:{lang:"javascript",$$slots:{default:[T]},$$scope:{ctx:e}}}),{c(){t=r("p"),a=o("Recently, working on my "),v=r("a"),S=o("Svelte"),q=o(" side project ("),C=r("a"),P=o("smitty.netlify.com"),H=o("), I came across the need to verify that all object properties in an array of objects were unique."),A=n(),M=r("p"),N=o("Thatâ€™s a little tough to explain in writing, so hereâ€™s an example:"),R=n(),s(G.$$.fragment),J=n(),W=r("p"),U=o("In my case, the IDs were hard-coded (rather than generated programmatically). As such, they were subject to human error, and I discovered that some IDs were duplicated."),L=n(),F=r("p"),Q=o("This was an issue because the ID numbers were being used for setting the HTML "),X=r("code"),_=o("id"),z=o("s in a form; that meant some of the "),B=r("code"),K=o("<label>"),V=o(" elements were being associated with the wrong input, which is pretty disastrous in a production app!"),Y=n(),Z=r("h2"),ee=o("The solution:"),te=n(),ae=r("p"),re=r("strong"),oe=o("How to find the duplicates though?"),ne=o(" In my case there were 100 unique objects in the array, so while combing through them manually certainly wasnâ€™t impossible, it was going to be a tedious task. The solution was to use JavaScriptâ€™s "),se=r("code"),ie=o("map"),ce=o(" method and "),he=r("code"),le=o("Set"),ue=o(" functionality."),fe=n(),de=r("ul"),me=r("li"),pe=r("strong"),ge=r("code"),ye=o("map"),we=o(" takes an array, and "),$e=r("em"),ve=o("maps"),Ee=o(" each thing in that array to a new array. (Here, we use it to create a new array with "),be=r("em"),ke=o("just"),De=o(" the original IDs.)"),Ie=n(),je=r("li"),xe=r("strong"),Oe=r("code"),Te=o("Set"),Se=o("s in JavaScript create new arrays (technically, sets) with only "),qe=r("em"),Ce=o("unique"),Pe=o(" values. (For example, the "),He=r("code"),Ae=o("Set"),Me=o(" of "),Ne=r("code"),Re=o("[0, 0, 1, 1, 2]"),Ge=o(" is "),Je=r("code"),We=o("[0, 1, 2]"),Ue=n(),Le=r("p"),Fe=o("To extract only the IDs of the original array, the code looks like this (where the original array is named "),Qe=r("code"),Xe=o("items"),_e=o("):"),ze=n(),s(Be.$$.fragment),Ke=n(),Ve=r("p"),Ye=o("Now weâ€™ve got an array of only unique IDs. What next?"),Ze=n(),et=r("p"),tt=o("Well, if we "),at=r("em"),rt=o("did"),ot=o(" have duplicate IDs in our original "),nt=r("code"),st=o("items"),it=o(" array, then the length of "),ct=r("code"),ht=o("IDs"),lt=o(" will be "),ut=r("em"),ft=o("different"),dt=o(" than the length of the original array. So itâ€™s a quick conditional check, which would "),mt=r("em"),pt=o("seem"),gt=o(" like this, but beware! Weâ€™re missing a step:"),yt=n(),s(wt.$$.fragment),$t=n(),vt=r("p"),Et=r("strong"),bt=o("Heads up!"),kt=o(" That wonâ€™t "),Dt=r("em"),It=o("quite"),jt=o(" work, because "),xt=r("code"),Ot=o("Set"),Tt=o("s and arrays in JavaScript are "),St=r("em"),qt=r("strong"),Ct=o("not"),Pt=o(" the same thing! The above comparison will always return "),Ht=r("code"),At=o("false"),Mt=o(" because, if you check, "),Nt=r("code"),Rt=o("IDs.length"),Gt=o(" is "),Jt=r("code"),Wt=o("undefined"),Ut=o(". (Thatâ€™s because "),Lt=r("code"),Ft=o(".length"),Qt=o(" is a method on arrays, not sets.)"),Xt=n(),_t=r("p"),zt=o("To fix the issue, we can just add a bit of ES6 destructuring to convert the set into an array:"),Bt=n(),s(Kt.$$.fragment),Vt=n(),Yt=r("p"),Zt=o("If you prefer, this is a little more explicit and works the same way; I just prefer the above shorthand, personally:"),ea=n(),s(ta.$$.fragment),aa=n(),ra=r("h2"),oa=o("Make it reusable"),na=n(),sa=r("p"),ia=o("If this is an issue you might run into frequently, you can abstract it to a function like so:"),ca=n(),s(ha.$$.fragment),la=n(),ua=r("p"),fa=o("And call it with, e.g., "),da=r("code"),ma=o("isEverythingUnique(items, 'id');"),pa=o(" (which would return "),ga=r("code"),ya=o("false"),wa=o(" in our case, because there are two objects each with "),$a=r("code"),va=o("id: 42"),Ea=o(")."),ba=n(),ka=r("p"),Da=o("If the function returns "),Ia=r("code"),ja=o("true"),xa=o(", then you know all the keys are unique. Otherwise, you have non-unique keys (IDs)."),Oa=n(),Ta=r("p"),Sa=o("To find out "),qa=r("em"),Ca=o("which"),Pa=o(" ones are duplicates, you can use this handy function which I developed from "),Ha=r("a"),Aa=o("this Hacker Noon post"),Ma=o(":"),Na=n(),s(Ra.$$.fragment),Ga=n(),Ja=r("p"),Wa=o("Call this function just like the one above, e.g., "),Ua=r("code"),La=o("getDuplicates(items, 'id')"),Fa=o(", which in our case, would get you an array that contains the non-unique IDs, like this:"),Qa=n(),s(Xa.$$.fragment),_a=n(),za=r("p"),Ba=r("strong"),Ka=o("Hope you enjoyed!"),Va=n(),Ya=r("strong"),Za=o("Thanks for reading."),this.h()},l(e){t=i(e,"P",{});var r=c(t);a=h(r,"Recently, working on my "),v=i(r,"A",{href:!0,rel:!0});var o=c(v);S=h(o,"Svelte"),o.forEach(l),q=h(r," side project ("),C=i(r,"A",{href:!0,rel:!0});var n=c(C);P=h(n,"smitty.netlify.com"),n.forEach(l),H=h(r,"), I came across the need to verify that all object properties in an array of objects were unique."),r.forEach(l),A=u(e),M=i(e,"P",{});var s=c(M);N=h(s,"Thatâ€™s a little tough to explain in writing, so hereâ€™s an example:"),s.forEach(l),R=u(e),f(G.$$.fragment,e),J=u(e),W=i(e,"P",{});var d=c(W);U=h(d,"In my case, the IDs were hard-coded (rather than generated programmatically). As such, they were subject to human error, and I discovered that some IDs were duplicated."),d.forEach(l),L=u(e),F=i(e,"P",{});var m=c(F);Q=h(m,"This was an issue because the ID numbers were being used for setting the HTML "),X=i(m,"CODE",{});var p=c(X);_=h(p,"id"),p.forEach(l),z=h(m,"s in a form; that meant some of the "),B=i(m,"CODE",{});var g=c(B);K=h(g,"<label>"),g.forEach(l),V=h(m," elements were being associated with the wrong input, which is pretty disastrous in a production app!"),m.forEach(l),Y=u(e),Z=i(e,"H2",{});var y=c(Z);ee=h(y,"The solution:"),y.forEach(l),te=u(e),ae=i(e,"P",{});var w=c(ae);re=i(w,"STRONG",{});var $=c(re);oe=h($,"How to find the duplicates though?"),$.forEach(l),ne=h(w," In my case there were 100 unique objects in the array, so while combing through them manually certainly wasnâ€™t impossible, it was going to be a tedious task. The solution was to use JavaScriptâ€™s "),se=i(w,"CODE",{});var E=c(se);ie=h(E,"map"),E.forEach(l),ce=h(w," method and "),he=i(w,"CODE",{});var b=c(he);le=h(b,"Set"),b.forEach(l),ue=h(w," functionality."),w.forEach(l),fe=u(e),de=i(e,"UL",{});var k=c(de);me=i(k,"LI",{});var D=c(me);pe=i(D,"STRONG",{});var I=c(pe);ge=i(I,"CODE",{});var j=c(ge);ye=h(j,"map"),j.forEach(l),I.forEach(l),we=h(D," takes an array, and "),$e=i(D,"EM",{});var x=c($e);ve=h(x,"maps"),x.forEach(l),Ee=h(D," each thing in that array to a new array. (Here, we use it to create a new array with "),be=i(D,"EM",{});var O=c(be);ke=h(O,"just"),O.forEach(l),De=h(D," the original IDs.)"),D.forEach(l),Ie=u(k),je=i(k,"LI",{});var T=c(je);xe=i(T,"STRONG",{});var er=c(xe);Oe=i(er,"CODE",{});var tr=c(Oe);Te=h(tr,"Set"),tr.forEach(l),er.forEach(l),Se=h(T,"s in JavaScript create new arrays (technically, sets) with only "),qe=i(T,"EM",{});var ar=c(qe);Ce=h(ar,"unique"),ar.forEach(l),Pe=h(T," values. (For example, the "),He=i(T,"CODE",{});var rr=c(He);Ae=h(rr,"Set"),rr.forEach(l),Me=h(T," of "),Ne=i(T,"CODE",{});var or=c(Ne);Re=h(or,"[0, 0, 1, 1, 2]"),or.forEach(l),Ge=h(T," is "),Je=i(T,"CODE",{});var nr=c(Je);We=h(nr,"[0, 1, 2]"),nr.forEach(l),T.forEach(l),k.forEach(l),Ue=u(e),Le=i(e,"P",{});var sr=c(Le);Fe=h(sr,"To extract only the IDs of the original array, the code looks like this (where the original array is named "),Qe=i(sr,"CODE",{});var ir=c(Qe);Xe=h(ir,"items"),ir.forEach(l),_e=h(sr,"):"),sr.forEach(l),ze=u(e),f(Be.$$.fragment,e),Ke=u(e),Ve=i(e,"P",{});var cr=c(Ve);Ye=h(cr,"Now weâ€™ve got an array of only unique IDs. What next?"),cr.forEach(l),Ze=u(e),et=i(e,"P",{});var hr=c(et);tt=h(hr,"Well, if we "),at=i(hr,"EM",{});var lr=c(at);rt=h(lr,"did"),lr.forEach(l),ot=h(hr," have duplicate IDs in our original "),nt=i(hr,"CODE",{});var ur=c(nt);st=h(ur,"items"),ur.forEach(l),it=h(hr," array, then the length of "),ct=i(hr,"CODE",{});var fr=c(ct);ht=h(fr,"IDs"),fr.forEach(l),lt=h(hr," will be "),ut=i(hr,"EM",{});var dr=c(ut);ft=h(dr,"different"),dr.forEach(l),dt=h(hr," than the length of the original array. So itâ€™s a quick conditional check, which would "),mt=i(hr,"EM",{});var mr=c(mt);pt=h(mr,"seem"),mr.forEach(l),gt=h(hr," like this, but beware! Weâ€™re missing a step:"),hr.forEach(l),yt=u(e),f(wt.$$.fragment,e),$t=u(e),vt=i(e,"P",{});var pr=c(vt);Et=i(pr,"STRONG",{});var gr=c(Et);bt=h(gr,"Heads up!"),gr.forEach(l),kt=h(pr," That wonâ€™t "),Dt=i(pr,"EM",{});var yr=c(Dt);It=h(yr,"quite"),yr.forEach(l),jt=h(pr," work, because "),xt=i(pr,"CODE",{});var wr=c(xt);Ot=h(wr,"Set"),wr.forEach(l),Tt=h(pr,"s and arrays in JavaScript are "),St=i(pr,"EM",{});var $r=c(St);qt=i($r,"STRONG",{});var vr=c(qt);Ct=h(vr,"not"),vr.forEach(l),$r.forEach(l),Pt=h(pr," the same thing! The above comparison will always return "),Ht=i(pr,"CODE",{});var Er=c(Ht);At=h(Er,"false"),Er.forEach(l),Mt=h(pr," because, if you check, "),Nt=i(pr,"CODE",{});var br=c(Nt);Rt=h(br,"IDs.length"),br.forEach(l),Gt=h(pr," is "),Jt=i(pr,"CODE",{});var kr=c(Jt);Wt=h(kr,"undefined"),kr.forEach(l),Ut=h(pr,". (Thatâ€™s because "),Lt=i(pr,"CODE",{});var Dr=c(Lt);Ft=h(Dr,".length"),Dr.forEach(l),Qt=h(pr," is a method on arrays, not sets.)"),pr.forEach(l),Xt=u(e),_t=i(e,"P",{});var Ir=c(_t);zt=h(Ir,"To fix the issue, we can just add a bit of ES6 destructuring to convert the set into an array:"),Ir.forEach(l),Bt=u(e),f(Kt.$$.fragment,e),Vt=u(e),Yt=i(e,"P",{});var jr=c(Yt);Zt=h(jr,"If you prefer, this is a little more explicit and works the same way; I just prefer the above shorthand, personally:"),jr.forEach(l),ea=u(e),f(ta.$$.fragment,e),aa=u(e),ra=i(e,"H2",{});var xr=c(ra);oa=h(xr,"Make it reusable"),xr.forEach(l),na=u(e),sa=i(e,"P",{});var Or=c(sa);ia=h(Or,"If this is an issue you might run into frequently, you can abstract it to a function like so:"),Or.forEach(l),ca=u(e),f(ha.$$.fragment,e),la=u(e),ua=i(e,"P",{});var Tr=c(ua);fa=h(Tr,"And call it with, e.g., "),da=i(Tr,"CODE",{});var Sr=c(da);ma=h(Sr,"isEverythingUnique(items, 'id');"),Sr.forEach(l),pa=h(Tr," (which would return "),ga=i(Tr,"CODE",{});var qr=c(ga);ya=h(qr,"false"),qr.forEach(l),wa=h(Tr," in our case, because there are two objects each with "),$a=i(Tr,"CODE",{});var Cr=c($a);va=h(Cr,"id: 42"),Cr.forEach(l),Ea=h(Tr,")."),Tr.forEach(l),ba=u(e),ka=i(e,"P",{});var Pr=c(ka);Da=h(Pr,"If the function returns "),Ia=i(Pr,"CODE",{});var Hr=c(Ia);ja=h(Hr,"true"),Hr.forEach(l),xa=h(Pr,", then you know all the keys are unique. Otherwise, you have non-unique keys (IDs)."),Pr.forEach(l),Oa=u(e),Ta=i(e,"P",{});var Ar=c(Ta);Sa=h(Ar,"To find out "),qa=i(Ar,"EM",{});var Mr=c(qa);Ca=h(Mr,"which"),Mr.forEach(l),Pa=h(Ar," ones are duplicates, you can use this handy function which I developed from "),Ha=i(Ar,"A",{href:!0,rel:!0});var Nr=c(Ha);Aa=h(Nr,"this Hacker Noon post"),Nr.forEach(l),Ma=h(Ar,":"),Ar.forEach(l),Na=u(e),f(Ra.$$.fragment,e),Ga=u(e),Ja=i(e,"P",{});var Rr=c(Ja);Wa=h(Rr,"Call this function just like the one above, e.g., "),Ua=i(Rr,"CODE",{});var Gr=c(Ua);La=h(Gr,"getDuplicates(items, 'id')"),Gr.forEach(l),Fa=h(Rr,", which in our case, would get you an array that contains the non-unique IDs, like this:"),Rr.forEach(l),Qa=u(e),f(Xa.$$.fragment,e),_a=u(e),za=i(e,"P",{});var Jr=c(za);Ba=i(Jr,"STRONG",{});var Wr=c(Ba);Ka=h(Wr,"Hope you enjoyed!"),Wr.forEach(l),Va=u(Jr),Ya=i(Jr,"STRONG",{});var Ur=c(Ya);Za=h(Ur,"Thanks for reading."),Ur.forEach(l),Jr.forEach(l),this.h()},h(){d(v,"href","https://svelte.dev/"),d(v,"rel","nofollow"),d(C,"href","https://smitty.netlify.com"),d(C,"rel","nofollow"),d(Ha,"href","https://hackernoon.com/finding-non-unique-elements-in-javascript-d934e6fd6260"),d(Ha,"rel","nofollow")},m(e,r){m(e,t,r),p(t,a),p(t,v),p(v,S),p(t,q),p(t,C),p(C,P),p(t,H),m(e,A,r),m(e,M,r),p(M,N),m(e,R,r),g(G,e,r),m(e,J,r),m(e,W,r),p(W,U),m(e,L,r),m(e,F,r),p(F,Q),p(F,X),p(X,_),p(F,z),p(F,B),p(B,K),p(F,V),m(e,Y,r),m(e,Z,r),p(Z,ee),m(e,te,r),m(e,ae,r),p(ae,re),p(re,oe),p(ae,ne),p(ae,se),p(se,ie),p(ae,ce),p(ae,he),p(he,le),p(ae,ue),m(e,fe,r),m(e,de,r),p(de,me),p(me,pe),p(pe,ge),p(ge,ye),p(me,we),p(me,$e),p($e,ve),p(me,Ee),p(me,be),p(be,ke),p(me,De),p(de,Ie),p(de,je),p(je,xe),p(xe,Oe),p(Oe,Te),p(je,Se),p(je,qe),p(qe,Ce),p(je,Pe),p(je,He),p(He,Ae),p(je,Me),p(je,Ne),p(Ne,Re),p(je,Ge),p(je,Je),p(Je,We),m(e,Ue,r),m(e,Le,r),p(Le,Fe),p(Le,Qe),p(Qe,Xe),p(Le,_e),m(e,ze,r),g(Be,e,r),m(e,Ke,r),m(e,Ve,r),p(Ve,Ye),m(e,Ze,r),m(e,et,r),p(et,tt),p(et,at),p(at,rt),p(et,ot),p(et,nt),p(nt,st),p(et,it),p(et,ct),p(ct,ht),p(et,lt),p(et,ut),p(ut,ft),p(et,dt),p(et,mt),p(mt,pt),p(et,gt),m(e,yt,r),g(wt,e,r),m(e,$t,r),m(e,vt,r),p(vt,Et),p(Et,bt),p(vt,kt),p(vt,Dt),p(Dt,It),p(vt,jt),p(vt,xt),p(xt,Ot),p(vt,Tt),p(vt,St),p(St,qt),p(qt,Ct),p(vt,Pt),p(vt,Ht),p(Ht,At),p(vt,Mt),p(vt,Nt),p(Nt,Rt),p(vt,Gt),p(vt,Jt),p(Jt,Wt),p(vt,Ut),p(vt,Lt),p(Lt,Ft),p(vt,Qt),m(e,Xt,r),m(e,_t,r),p(_t,zt),m(e,Bt,r),g(Kt,e,r),m(e,Vt,r),m(e,Yt,r),p(Yt,Zt),m(e,ea,r),g(ta,e,r),m(e,aa,r),m(e,ra,r),p(ra,oa),m(e,na,r),m(e,sa,r),p(sa,ia),m(e,ca,r),g(ha,e,r),m(e,la,r),m(e,ua,r),p(ua,fa),p(ua,da),p(da,ma),p(ua,pa),p(ua,ga),p(ga,ya),p(ua,wa),p(ua,$a),p($a,va),p(ua,Ea),m(e,ba,r),m(e,ka,r),p(ka,Da),p(ka,Ia),p(Ia,ja),p(ka,xa),m(e,Oa,r),m(e,Ta,r),p(Ta,Sa),p(Ta,qa),p(qa,Ca),p(Ta,Pa),p(Ta,Ha),p(Ha,Aa),p(Ta,Ma),m(e,Na,r),g(Ra,e,r),m(e,Ga,r),m(e,Ja,r),p(Ja,Wa),p(Ja,Ua),p(Ua,La),p(Ja,Fa),m(e,Qa,r),g(Xa,e,r),m(e,_a,r),m(e,za,r),p(za,Ba),p(Ba,Ka),p(za,Va),p(za,Ya),p(Ya,Za),er=!0},p(e,[t]){const a={};1&t&&(a.$$scope={dirty:t,ctx:e}),G.$set(a);const r={};1&t&&(r.$$scope={dirty:t,ctx:e}),Be.$set(r);const o={};1&t&&(o.$$scope={dirty:t,ctx:e}),wt.$set(o);const n={};1&t&&(n.$$scope={dirty:t,ctx:e}),Kt.$set(n);const s={};1&t&&(s.$$scope={dirty:t,ctx:e}),ta.$set(s);const i={};1&t&&(i.$$scope={dirty:t,ctx:e}),ha.$set(i);const c={};1&t&&(c.$$scope={dirty:t,ctx:e}),Ra.$set(c);const h={};1&t&&(h.$$scope={dirty:t,ctx:e}),Xa.$set(h)},i(e){er||(y(G.$$.fragment,e),y(Be.$$.fragment,e),y(wt.$$.fragment,e),y(Kt.$$.fragment,e),y(ta.$$.fragment,e),y(ha.$$.fragment,e),y(Ra.$$.fragment,e),y(Xa.$$.fragment,e),er=!0)},o(e){w(G.$$.fragment,e),w(Be.$$.fragment,e),w(wt.$$.fragment,e),w(Kt.$$.fragment,e),w(ta.$$.fragment,e),w(ha.$$.fragment,e),w(Ra.$$.fragment,e),w(Xa.$$.fragment,e),er=!1},d(e){e&&l(t),e&&l(A),e&&l(M),e&&l(R),$(G,e),e&&l(J),e&&l(W),e&&l(L),e&&l(F),e&&l(Y),e&&l(Z),e&&l(te),e&&l(ae),e&&l(fe),e&&l(de),e&&l(Ue),e&&l(Le),e&&l(ze),$(Be,e),e&&l(Ke),e&&l(Ve),e&&l(Ze),e&&l(et),e&&l(yt),$(wt,e),e&&l($t),e&&l(vt),e&&l(Xt),e&&l(_t),e&&l(Bt),$(Kt,e),e&&l(Vt),e&&l(Yt),e&&l(ea),$(ta,e),e&&l(aa),e&&l(ra),e&&l(na),e&&l(sa),e&&l(ca),$(ha,e),e&&l(la),e&&l(ua),e&&l(ba),e&&l(ka),e&&l(Oa),e&&l(Ta),e&&l(Na),$(Ra,e),e&&l(Ga),e&&l(Ja),e&&l(Qa),$(Xa,e),e&&l(_a),e&&l(za)}}}const q={title:"How to Check Uniqueness in an Array of Objects in JavaScript",date:"2020-02-17",updated:"2020-05-19",categories:["javascript","web"],coverImage:"EQ0-F2nXUAEpgCx.jpeg",excerpt:"Working with arrays of objects in JavaScript can be difficult. This post covers how to ensure all object keys (IDs) are unique, and how to find non-unique values."};class C extends e{constructor(e){super(),t(this,e,null,S,a,{})}}export{C as default,q as metadata};
